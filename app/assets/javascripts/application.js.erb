// This is a manifest file that'll be compiled into including all the files listed below.
// Add new JavaScript/Coffee code in separate files in this directory and they'll automatically
// be included in the compiled file accessible from http://example.com/assets/application.js
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
//= require jquery
//= require jquery_ujs
//= require jquery_ui
//= require jquery_tmpl
//= require jquery_validate
//= require jquery.tablednd
//= require jquery.transform2d
//= require jquery.cookie
//= require_self

SUBMARINE = {
  lock: {
    timer_id: null,
    start_time: null,
    max_lock_time: <%= Configurable.max_lock_time * 1000 %>,
   
    start_timeout: function(max_lock_time){
      SUBMARINE.lock.max_lock_time = max_lock_time;
      SUBMARINE.lock.set_start_time_to_now(max_lock_time);
      SUBMARINE.lock.timer_id = setInterval(SUBMARINE.lock.check_timeout, 1000);

      SUBMARINE.lock.update_timeout_view(0);
      $('html').addClass('locked_html');
      $('.list_header').removeClass('unlocked_list_header').addClass('locked_list_header');
      // enable UI bindings related to the locked mode
      SUBMARINE.lock.enable_lock_bindings();
      // show the extend button
      $('#extend_btn').removeClass('hidden').addClass('visible');
    },

    set_start_time_to_now: function(max_lock_time){
      SUBMARINE.lock.start_time = new Date().getTime();
      $.cookie('SUBMARINE.lock.start_time', SUBMARINE.lock.start_time);
      $.cookie('SUBMARINE.lock.max_lock_time', max_lock_time);
    },

    // revive a timeout after a page refresh or load
    revive_timeout: function(){
      SUBMARINE.lock.start_time = $.cookie('SUBMARINE.lock.start_time');
      SUBMARINE.lock.max_lock_time = $.cookie('SUBMARINE.lock.max_lock_time');
      if (SUBMARINE.lock.check_timeout()) {
        SUBMARINE.lock.timer_id = setInterval(SUBMARINE.lock.check_timeout, 1000);
        $('#extend_btn').removeClass('hidden').addClass('visible');
      }
    },

    stop_timeout: function(){
      clearInterval(SUBMARINE.lock.timer_id);

      SUBMARINE.lock.disable_lock_bindings();
      $("#lock_timeout").empty();
      $('html').removeClass('locked_html');
      $('.list_header').removeClass('locked_list_header').addClass('unlocked_list_header');
      $("#lock_btn").empty();
      $('#lock_btn').append('<%= image_tag "edit_doc.png" %>');
      $('#lock_btn').append('<%= content_tag :span, I18n.t("backlog.edit") %>');
      $('#extend_btn').removeClass('visible').addClass('hidden');
    },

    stop_timeout_on_server: function() {
      $.post('timeout_elapsed', function(data, a, b) {
        $('#backlog').replaceWith(data.backlog);
        $('#sprint_backlog').replaceWith(data.sprint_backlog);
        SUBMARINE.showStoryPointsSum();
      }, 'json');
      SUBMARINE.lock.set_lock_time_to_default();
    },

    extend_lock_time: function() {
      SUBMARINE.lock.set_start_time_to_now(SUBMARINE.lock.max_lock_time);
      SUBMARINE.lock.update_timeout_view(0);
    },

    increase_lock_time: function() {
      SUBMARINE.lock.max_lock_time = <%= Configurable.max_edit_lock_time * 1000 %>;
      SUBMARINE.lock.set_start_time_to_now(SUBMARINE.lock.max_lock_time);
    },

    set_lock_time_to_default: function() {
      SUBMARINE.lock.max_lock_time = <%= Configurable.default_max_lock_time * 1000 %>;
      SUBMARINE.lock.extend_lock_time();
      $.ajax({type: 'POST',
        url: '/default_timeout',
        async: false});
      $.cookie('SUBMARINE.lock.max_lock_time', SUBMARINE.lock.max_lock_time);
      $.cookie('SUBMARINE.lock.start_time', SUBMARINE.lock.start_time);
    },

    check_timeout: function(){
      var result = false;
      var elapsed = new Date().getTime() - SUBMARINE.lock.start_time;
      if(elapsed <= SUBMARINE.lock.max_lock_time) {
        SUBMARINE.lock.update_timeout_view(elapsed);
        result = true;
      } else {
        SUBMARINE.lock.stop_timeout();
        SUBMARINE.lock.stop_timeout_on_server();
        result = false;
      }
      return result;
    },

    update_timeout_view: function(elapsed) {
      var time_left = Math.round(Math.floor(SUBMARINE.lock.max_lock_time - elapsed) / 1000);
      $("#lock_timeout").html(time_left + " sec");
    },

    enable_lock_bindings: function() {
      // enable UI bindings related to the locked mode
      $("#sprint_backlog_list, #backlog_list").sortable({
        connectWith: ".connectedSortable",
        start: function(event,ui){$(ui.item).addClass("dragging");},
        stop: SUBMARINE.changeListHandler,
        disabled: false}).disableSelection();
      $("ul.connectedSortable > li").mouseenter(SUBMARINE.showControls).mouseleave(SUBMARINE.hideControls);
    },

    disable_lock_bindings: function() {
      $("#sprint_backlog_list, #backlog_list").sortable("option", "disabled", true);
      var list_elems = $("ul.connectedSortable > li");
      list_elems.unbind('mouseenter', SUBMARINE.showControls);
      list_elems.unbind('mouseleave', SUBMARINE.hideControls);
      $('.controls').hide();
      SUBMARINE.showStoryPointsSum();
    },
  },

  show_notice: function(notice) {
    if($('#flashnotice').size() > 0) {
      $('#flashnotice').replaceWith('<div id="flashnotice">' + notice + '<div>');
    } else {
      $('header').after('<div id="flashnotice">' + notice + '<div>');
    }
  },

  hide_notice: function() {
    $('#flashnotice').remove();
  },

  /*** list drag'n drop handling ***/
  changeListHandler: function(event,ui){
    <% feature_active? :temp_lock_lists do %>
      SUBMARINE.lock.extend_lock_time();
    <% end %>
    $(ui.item).removeClass("dragging");
    var moved_issue_id;
    var list_element;
    if($(event.target).is("li")) {
      list_element = $(event.target);
    } else {
      list_element = $(event.target).parents('li'); 
    }

    var controls = list_element.find('.controls_container');
    var finish_button = list_element.find('a.finish_button');
    if (list_element.parents('ul#sprint_backlog_list').size() > 0) {
      finish_button.removeClass("finish");
      controls.addClass('sprint_controls');
    } else {
      finish_button.addClass("finish");
      controls.removeClass('sprint_controls');
    }

    moved_issue_id = list_element.attr("data-id");
    var data = { moved_issue_id: moved_issue_id, backlog_list: [], sprint_backlog_list: [] };
    data.predecessor_id = $(list_element).prev() && $(list_element).prev().attr("data-id");
    $('ul#backlog_list > li').each(function(i, li){
      data.backlog_list.push($(li).attr("data-id")); 
    });
    $('ul#sprint_backlog_list > li').each(function(i, li){
      data.sprint_backlog_list.push($(li).attr("data-id")); 
    });
    $.ajax({
      type: 'POST',
      url: SUBMARINE.changeListURL,
      data: data,
      error: function(){window.alert(SUBMARINE.messages.save_failed)}});
    SUBMARINE.showStoryPointsSum();
  },

  toggleDescription: function(event){
    if($(this).hasClass("short")){
      $(this).removeClass("short");
      $(this).parent().css('height', $(this).height());
    } else {
      $(this).addClass("short");
      $(this).parent().css('height', $(this).height());	  
    }
  },

  showControls: function(event){
    $(this).find('div.controls').fadeIn(80);
  },

  hideControls: function(event){
    $(this).find('div.controls').fadeOut(80);
  },

  showStoryPointsSum: function(){
    var sum = 0.0;
    var elements = $('ul#sprint_backlog_list > li');
    $('#half_story_point_small').hide();
    $('#half_story_point').hide();
    $('#story_points_sum > span').show();
    $.each(elements, function(i, element) {
      value = parseFloat($(element).attr('data-story_points'), 10);
      if(!!value) {
        sum += value;
      }
    });
    if(Math.floor(sum + 0.5) != sum) {
      if(sum >= 1) {
        $('#story_points_sum > span').html(Math.floor(sum));
        $('#half_story_point_small').show();
      } else {
        $('#half_story_point').show();
        $('#story_points_sum > span').hide();
      }
    } else {
      $('#story_points_sum > span').html(Math.floor(sum));
    }
  },

  check_sp_radio_image: function(){
    SUBMARINE.animate_radio_image(this, 'sp_radio_images');

    // set value in form
    $(this).siblings('input').val($(this).attr('data-sp-value'));
  },

  check_type_radio_image: function(){
    SUBMARINE.animate_radio_image(this, 'type_radio_images');

    // set value in form
    $(this).siblings('input').val($(this).attr('data-type'));
  },

  check_project_radio_image: function(){
    SUBMARINE.animate_radio_image(this, 'project_radio_images');

    // set value in form
    $(this).siblings('input').val($(this).attr('data-project-id'))
  },

  animate_radio_image: function(element, image_type){
    var old_element = $('.' + image_type + ' .radio_image.active')[0];
    if(!!old_element) {
      var old_el_img = $(old_element).children('img')[0];
      $(old_element).animate({transform: 'translateY(0px) scale(1)'});
      $(old_el_img).attr('src', $(old_el_img).attr("data-img_light"));
      $(old_element).removeClass('active');
    }
    var translation = '5px';
    if(image_type == 'sp_radio_images') {
      translation = '10px';
    }
    var img = $(element).children('img')[0];
    if($(img).attr("src").indexOf('_light') > 0) {
      $(img).attr("src", $(img).attr("data-img_heavy"));
    }
    $(element).animate({transform: 'translateY(-' + translation + ') scale(1.3)'});
    $(element).addClass('active');
  },

  preselect_radio_images: function(story_points, type, project) {
    var sp_div = $('div.sp_' + story_points.replace('.', '_'));
    if(sp_div.size() <= 0) {
      sp_div = $('div.sp_unknown');
    }
    SUBMARINE.animate_radio_image(sp_div[0], 'sp_radio_images');
    var type_div = $('div.' + type.toLowerCase());
    if(type_div.size() > 0) {
      SUBMARINE.animate_radio_image(type_div[0], 'type_radio_images');
    }
    var project_div = $('div.' + project.toLowerCase());
    if(project_div.size() > 0) {
      SUBMARINE.animate_radio_image(project_div[0], 'project_radio_images');
    }
  },

  messages: {}
}
